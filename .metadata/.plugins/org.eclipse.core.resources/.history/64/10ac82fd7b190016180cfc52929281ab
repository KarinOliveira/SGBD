package controller;

import java.util.ArrayList;

import javax.swing.event.ChangeListener;

import enums.TransactionEvents;
import enums.TransactionStates;
import events.ReadingEvent;
import events.TerminateEvent;
import events.TransactionBegin;
import model.Event;
import model.Transaction;

public class TransactionManager {
	
//	private TransactionBegin transactionBegin;
//	private ReadTransaction readTransaction;
//	private TerminateTransaction terminateTransaction;
	
	
	private ArrayList<Transaction> transactions;
	public ArrayList<Event> events;
		
	public TransactionManager() {
//		this.transactionBegin = new TransactionBegin(TransactionEvents.TRANSACTION_BEGIN.eventTitle);
//		this.readTransaction = new ReadTransaction(TransactionEvents.READ.eventTitle);
//		this.terminateTransaction = new TerminateTransaction(TransactionEvents.TRANSACTION_TERMINATE.eventTitle);
		
		this.transactions = new ArrayList<>();
		this.events = new ArrayList<>();
		
		initStates();
	}
	
	public void createTransaction(String id) {		
		if (searchTransaction(id) == null) {
			Transaction newTransaction = new Transaction(id);
			
			newTransaction.setCurrentState(TransactionStates.TRANSACTION_STARTED.stateTitle);
						
			addNewTransaction(newTransaction);
		}		
	}
	
	//CRIAR EXCEÇÕES
	public void changeTransactionState(String transactionId, int newStateIndex) {	
		Transaction mTransaction = searchTransaction(transactionId);

		/* if (mTransaction == null) throw TransactioNotFound */
		
		Event newEvent = events.get(newStateIndex);
		newEvent.changeState(mTransaction);		
	}
	
	private Transaction searchTransaction(String transactionId) {		
		for (Transaction transaction : transactions) {
			if (transaction.getId().equals(transactionId)) {
				return transaction;
			}
		}
		
		return null;
	}
	
	public void showTransactions() {
		for (Transaction transaction : transactions) {
			System.out.println(transaction);
		}
	}
	
	private void initStates() {
//		events.add(transactionBegin);
//		events.add(readTransaction);
//		events.add(terminateTransaction);
	}

	private void addNewTransaction(Transaction transaction) {
		this.transactions.add(transaction);
	}
}
