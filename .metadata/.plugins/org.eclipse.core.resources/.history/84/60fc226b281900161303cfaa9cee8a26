package controller;

import java.util.ArrayList;

import javax.swing.event.ChangeListener;

import enumeration.TransactionStates;
import events.ReadTransaction;
import events.TransactionBegin;
import model.Transaction;

public class TransactionManager {
	
	private TransactionBegin transactionBegin;
	private ReadTransaction readTransaction;
	private ArrayList<Object> states;
	
	private ArrayList<Transaction> transactions;
	
	public TransactionManager() {
		this.transactions = new ArrayList<>();
		
		this.transactionBegin = new TransactionBegin();
		this.readTransaction = new ReadTransaction();
		
		this.states = new ArrayList<>();
		
		initStates();
	}
	
	public void changeTransactionState(String transactionId) {
		Transaction mTransaction = searchTransaction(transactionId);
		
		if (mTransaction != null) {
			
		}
	}
	
	public void createTransaction(String id) {
		Transaction newTransaction = new Transaction(id);
		
		transactionBegin = new TransactionBegin();		
		transactionBegin.changeState(newTransaction);
				
		addNewTransaction(newTransaction);
	}
	
	public void showTransactions() {
		for (Transaction transaction : transactions) {
			System.out.println(transaction);
		}
	}
	
	private void initStates() {
		states.add(transactionBegin);
		states.add(readTransaction);
	}
	
	private int getCurrentStateClass() {
		int index;
		
		return index;
	}
	
	private Transaction searchTransaction(String id) {
		Transaction mTransaction = null;
		
		for (Transaction transaction : transactions) {
			if (transaction.getId().equalsIgnoreCase(id)) {
				mTransaction = transaction;
				return mTransaction;
			}
		}
		
		return mTransaction;
	}
	
	private void addNewTransaction(Transaction transaction) {
		this.transactions.add(transaction);
	}
}
